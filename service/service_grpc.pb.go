// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: service/service.proto

package service

import (
	context "context"
	param "github.com/leaderseek/api-go/service/param"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderseekClient is the client API for Leaderseek service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderseekClient interface {
	TeamCreate(ctx context.Context, in *param.TeamCreateRequest, opts ...grpc.CallOption) (*param.TeamCreateResponse, error)
	TeamAddMembers(ctx context.Context, in *param.TeamAddMembersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type leaderseekClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderseekClient(cc grpc.ClientConnInterface) LeaderseekClient {
	return &leaderseekClient{cc}
}

func (c *leaderseekClient) TeamCreate(ctx context.Context, in *param.TeamCreateRequest, opts ...grpc.CallOption) (*param.TeamCreateResponse, error) {
	out := new(param.TeamCreateResponse)
	err := c.cc.Invoke(ctx, "/api.v0.service.Leaderseek/TeamCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderseekClient) TeamAddMembers(ctx context.Context, in *param.TeamAddMembersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v0.service.Leaderseek/TeamAddMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderseekServer is the server API for Leaderseek service.
// All implementations must embed UnimplementedLeaderseekServer
// for forward compatibility
type LeaderseekServer interface {
	TeamCreate(context.Context, *param.TeamCreateRequest) (*param.TeamCreateResponse, error)
	TeamAddMembers(context.Context, *param.TeamAddMembersRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLeaderseekServer()
}

// UnimplementedLeaderseekServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderseekServer struct {
}

func (UnimplementedLeaderseekServer) TeamCreate(context.Context, *param.TeamCreateRequest) (*param.TeamCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamCreate not implemented")
}
func (UnimplementedLeaderseekServer) TeamAddMembers(context.Context, *param.TeamAddMembersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamAddMembers not implemented")
}
func (UnimplementedLeaderseekServer) mustEmbedUnimplementedLeaderseekServer() {}

// UnsafeLeaderseekServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderseekServer will
// result in compilation errors.
type UnsafeLeaderseekServer interface {
	mustEmbedUnimplementedLeaderseekServer()
}

func RegisterLeaderseekServer(s grpc.ServiceRegistrar, srv LeaderseekServer) {
	s.RegisterService(&Leaderseek_ServiceDesc, srv)
}

func _Leaderseek_TeamCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(param.TeamCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderseekServer).TeamCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.service.Leaderseek/TeamCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderseekServer).TeamCreate(ctx, req.(*param.TeamCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leaderseek_TeamAddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(param.TeamAddMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderseekServer).TeamAddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v0.service.Leaderseek/TeamAddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderseekServer).TeamAddMembers(ctx, req.(*param.TeamAddMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Leaderseek_ServiceDesc is the grpc.ServiceDesc for Leaderseek service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leaderseek_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v0.service.Leaderseek",
	HandlerType: (*LeaderseekServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TeamCreate",
			Handler:    _Leaderseek_TeamCreate_Handler,
		},
		{
			MethodName: "TeamAddMembers",
			Handler:    _Leaderseek_TeamAddMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
